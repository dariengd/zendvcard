<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../../../../library/App/Data/Vcard.php';

/**
 * Test class for App_Data_Vcard.
 * Generated by PHPUnit on 2010-10-13 at 14:24:55.
 */
class App_Data_VcardTest extends PHPUnit_Framework_TestCase
{

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{

	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	public function testSets()
	{
		$vCard = new App_Data_Vcard();
		$vCard->setUid('UID123')
						->setTitle('TITLE')
						->setFullname('FULL NAME')
						->setLastname('LASTNAME')
						->setFirstname('FIRSTNAME')
						->setNickname('NICKNAME')
						->setAdditionalnames('ADDITIONALNAMES')
						->setNameprefix('NAMEPREFIX')
						->setNamesuffix('NAMESUFFIX')
						->setBirthday('1990-12-12')
						->setOrganization('Komola')
						->setDepartment('Development')
						->setSubdepartment('Suplify')
						->setRole('Chef')
						->setRevision('1990-12-12')
						->setGender(App_Data_Vcard::GENDERMALE);
		$this->assertEquals($vCard->uid, 'UID123');
		$this->assertEquals($vCard->title, 'TITLE');
		$this->assertEquals($vCard->fullname, 'FULL NAME');
		$this->assertEquals($vCard->lastname, 'LASTNAME');
		$this->assertEquals($vCard->firstname, 'FIRSTNAME');
		$this->assertEquals($vCard->nickname, 'NICKNAME');
		$this->assertEquals($vCard->additionalnames, 'ADDITIONALNAMES');
		$this->assertEquals($vCard->nameprefix, 'NAMEPREFIX');
		$this->assertEquals($vCard->namesuffix, 'NAMESUFFIX');
		$this->assertEquals($vCard->birthday, '1990-12-12');
		$this->assertEquals($vCard->organization, 'Komola');
		$this->assertEquals($vCard->department, 'Development');
		$this->assertEquals($vCard->subdepartment, 'Suplify');
		$this->assertEquals($vCard->role, 'Chef');
		$this->assertEquals($vCard->revision, '1990-12-12');
		$this->assertEquals($vCard->gender, 'Male');
	}

	public function testPhonenumber()
	{
		$vCard = new App_Data_Vcard();
		$vCard->addPhonenumber("123456");
		$vCard->addPhonenumber("234567", App_Data_Vcard::TELEPHONEHOME);
		$vCard->addPhonenumber(array(
				array('value' => "345678",
						'type' => array(App_Data_Vcard::TELEPHONEHOME)),
				array('value' => "456789",
						'type' => array(App_Data_Vcard::TELEPHONEWORK,
								App_Data_Vcard::TELEPHONEVOICE))));
		$this->assertEquals($vCard->telephone, array(
				array('value' => '123456', 'type' => array()),
				array('value' => '234567', 'type' => array('HOME')),
				array('value' => '345678', 'type' => array('HOME')),
				array('value' => '456789', 'type' => array('WORK', 'VOICE'))
		));
	}

	public function testEmail()
	{
		$vCard = new App_Data_Vcard();
		$vCard->addEmail("schaaf@komola.de");
		$vCard->addEmail("thomas.schaaf@komola.de", App_Data_Vcard::EMAILHOME);
		$vCard->addEmail(array(
				array('value' => "thomas@komola.de",
						'type' => array(App_Data_Vcard::EMAILINTERNET)),
				array('value' => "asd@komola.de",
						'type' => array(App_Data_Vcard::EMAILOTHER,
								App_Data_Vcard::EMAILINTERNET))));

		$this->assertEquals($vCard->email, array(
				array('value' => 'schaaf@komola.de', 'type' => array()),
				array('value' => 'thomas.schaaf@komola.de', 'type' => array('HOME')),
				array('value' => 'thomas@komola.de', 'type' => array('INTERNET')),
				array('value' => 'asd@komola.de', 'type' => array('OTHER', 'INTERNET'))
		));
	}

	public function testUrl()
	{
		$vCard = new App_Data_Vcard();
		$vCard->addUrl("http://vsphp.de");
		$vCard->addUrl("http://suplify.me", App_Data_Vcard::URLWORK);
		$vCard->addUrl(array(
				array('value' => "http://komola.de",
						'type' => array(App_Data_Vcard::URLWORK)),
				array('value' => "http://www.komola.de",
						'type' => array(App_Data_Vcard::URLPREF,
								App_Data_Vcard::URLWORK))));
		$this->assertEquals($vCard->url, array(
				array('value' => 'http://vsphp.de', 'type' => array()),
				array('value' => 'http://suplify.me', 'type' => array('WORK')),
				array('value' => 'http://komola.de', 'type' => array('WORK')),
				array('value' => 'http://www.komola.de', 'type' => array('PREF', 'WORK'))
		));
	}

	public function testAddress()
	{
		$vCard = new App_Data_Vcard();
		$vCard->addAddress(array(
				'postofficeaddress' => '',
				'extendedaddress' => '',
				'street' => 'Examplestreet',
				'city' => 'City',
				'state' => 'Somestate',
				'zip' => '12341',
				'country' => 'Country'));
		$vCard->addAddress(array(
				'postofficeaddress' => '',
				'extendedaddress' => 'first Floor',
				'street' => 'Examplestreet',
				'city' => 'City',
				'state' => 'Somestate',
				'zip' => '12341',
				'country' => 'Country',
				'type' => App_Data_Vcard::ADDRESSHOME));
		$vCard->addAddress(array(
				'postofficeaddress' => '',
				'extendedaddress' => 'first Floor',
				'street' => 'Examplestreet',
				'city' => 'City',
				'state' => 'Somestate',
				'zip' => '12341',
				'country' => 'Country',
				'type' => array(App_Data_Vcard::ADDRESSHOME, App_Data_Vcard::ADDRESSINTERNATIONAL)));
		$vCard->addAddress(array(
				array(
						'postofficeaddress' => 'fgh',
						'extendedaddress' => 'first Floor',
						'street' => 'Examplestreet',
						'city' => 'City',
						'zip' => '12341',
						'country' => 'Country',
						'type' => App_Data_Vcard::ADDRESSHOME),
				array(
						'country' => 'Country',
						'type' => array(App_Data_Vcard::ADDRESSHOME, App_Data_Vcard::ADDRESSSPOSTAL))));
		$this->assertEquals($vCard->address, array(
				array(
						'postofficeaddress' => '',
						'extendedaddress' => '',
						'street' => 'Examplestreet',
						'city' => 'City',
						'state' => 'Somestate',
						'zip' => '12341',
						'country' => 'Country',
						'type' => array()),
				array(
						'postofficeaddress' => '',
						'extendedaddress' => 'first Floor',
						'street' => 'Examplestreet',
						'city' => 'City',
						'state' => 'Somestate',
						'zip' => '12341',
						'country' => 'Country',
						'type' => array('HOME')),
				array(
						'postofficeaddress' => '',
						'extendedaddress' => 'first Floor',
						'street' => 'Examplestreet',
						'city' => 'City',
						'state' => 'Somestate',
						'zip' => '12341',
						'country' => 'Country',
						'type' => array('HOME', 'INTL')),
				array(
						'postofficeaddress' => 'fgh',
						'extendedaddress' => 'first Floor',
						'street' => 'Examplestreet',
						'city' => 'City',
						'state' => '',
						'zip' => '12341',
						'country' => 'Country',
						'type' => array('HOME')),
				array(
						'postofficeaddress' => '',
						'extendedaddress' => '',
						'street' => '',
						'city' => '',
						'state' => '',
						'zip' => '',
						'country' => 'Country',
						'type' => array('HOME', 'POSTAL'))
		));
	}
	public function testIm()
	{
		$vCard = new App_Data_Vcard();
		$vCard->addInstantmessenger("thomas@schaafs.net", App_Data_Vcard::IMMSN);
		$vCard->addInstantmessenger("thomas@schaafs.net", App_Data_Vcard::IMMSN, App_Data_Vcard::IMWORK);
		$vCard->addInstantmessenger(array(
				array('value' => "thomaschaaf",
						'messenger' => App_Data_Vcard::IMSKYPE,
						'type' => array(App_Data_Vcard::IMHOME)),
				array('value' => "149795107",
						'messenger' => App_Data_Vcard::IMICQ,
						'type' => array(App_Data_Vcard::IMHOME,
								App_Data_Vcard::IMPREF))));
		$this->assertEquals($vCard->im, array(
				array('value' => 'thomas@schaafs.net','type' => array(), 'messenger' => 'X-MSN'),
				array('value' => 'thomas@schaafs.net', 'type' => array('WORK'),'messenger' => 'X-MSN'),
				array('value' => 'thomaschaaf','type' => array('HOME'), 'messenger' => 'X-SKYPE'),
				array('value' => '149795107','type' => array('HOME', 'PREF'), 'messenger' => 'X-ICQ')));
	}
	 
}
?>
