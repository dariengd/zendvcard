<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../../../../../library/App/Data/Vcard/Parser.php';

/**
 * Test class for App_Data_Vcard_Parser.
 * Generated by PHPUnit on 2010-10-13 at 14:25:05.
 */
class App_Data_Vcard_ParserTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var App_Data_Vcard_Parser
	 */
	
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	public function testSimpleVcardThomasSchaaf()
	{
		$vcardString = "BEGIN:VCARD\r\nVERSION:3.0\r\nN:Schaaf;Thomas\r\nFN:Thomas Schaaf\r\nEND:VCARD";
		$parser = new App_Data_Vcard_Parser($vcardString);
		$cardObject = $parser->parse();
		$card = $cardObject[0];
//		var_dump($card);
//		exit;
		$this->assertEquals($card->lastname, "Schaaf");
		$this->assertEquals($card->firstname, "Thomas");
		$this->assertEquals($card->fullname, "Thomas Schaaf");
	}

	public function testSimpleVcardThomasSchaafEmail()
	{
		$vcardString = "BEGIN:VCARD\r\nVERSION:3.0\r\nN:Schaaf;Thomas\r\nFN:Thomas Schaaf\r\nEMAIL;PREF;INTERNET:thomas.schaaf@komola.de\r\nEND:VCARD";
		$parser = new App_Data_Vcard_Parser($vcardString);
		$cardObject = $parser->parse();
		$card = $cardObject[0];
		//var_dump($card);
		$this->assertEquals($card->lastname, "Schaaf");
		$this->assertEquals($card->firstname, "Thomas");
		$this->assertEquals($card->fullname, "Thomas Schaaf");

		$email = $card->email;
		$this->assertEquals($email[0]['value'], "thomas.schaaf@komola.de");
		$this->assertEquals($email[0]['type'][0], "PREF");
		$this->assertEquals($email[0]['type'][1], "INTERNET");
	}
	public function testSimpleVcardThomasSchaafTelephone()
	{
		$vcardString = "BEGIN:VCARD\r\nVERSION:3.0\r\nN:Schaaf;Thomas\r\nFN:Thomas Schaaf\r\nTEL;WORK;VOICE:+495313804200\r\nEND:VCARD";
		$parser = new App_Data_Vcard_Parser($vcardString);
		$cardObject = $parser->parse();
		$card = $cardObject[0];
		//var_dump($card);
		$this->assertEquals($card->lastname, "Schaaf");
		$this->assertEquals($card->firstname, "Thomas");
		$this->assertEquals($card->fullname, "Thomas Schaaf");

		$telephone = $card->telephone;
		$this->assertEquals($telephone[0]['value'], "+495313804200");
		$this->assertEquals($telephone[0]['type'][0], "WORK");
		$this->assertEquals($telephone[0]['type'][1], "VOICE");
	}

	public function testSimpleVcardThomasSchaafAddress()
	{
		$vcardString = "BEGIN:VCARD\r\nVERSION:3.0\r\nN:Schaaf;Thomas\r\nFN:Thomas Schaaf\r\nADR;WORK:;2nd floor;Rebenring 33;Braunschweig;Niedersachsen;38116;Germany\r\nEND:VCARD";
		$parser = new App_Data_Vcard_Parser($vcardString);
		$cardObject = $parser->parse();
		$card = $cardObject[0];
		//var_dump($card);
		$this->assertEquals($card->lastname, "Schaaf");
		$this->assertEquals($card->firstname, "Thomas");
		$this->assertEquals($card->fullname, "Thomas Schaaf");

		$address = $card->address;
		$this->assertEquals($address[0]['postofficeaddress'], "");
		$this->assertEquals($address[0]['extendedaddress'], "2nd floor");
		$this->assertEquals($address[0]['street'], "Rebenring 33");
		$this->assertEquals($address[0]['city'], "Braunschweig");
		$this->assertEquals($address[0]['state'], "Niedersachsen");
		$this->assertEquals($address[0]['zip'], "38116");
		$this->assertEquals($address[0]['country'], "Germany");
	}

	public function testSimpleVcardSebastianHoitz()
	{
		$vcardString = "BEGIN:VCARD\r\nVERSION:2.1\r\nN:Hoitz;Sebastian\r\nFN:Sebastian Hoitz\r\nORG:komola UG\r\nADR;WORK:;2nd floor;Rebenring 33;Braunschweig;Niedersachsen;38116;Germany\r\nTEL;WORK;VOICE:+495313804200\r\nTEL;CELL;VOICE:+491752517038\r\nBDAY:1990-12-12\r\nURL;WORK:http://komola.de\r\nEMAIL;PREF;INTERNET:sebastian.hoitz@komola.de\r\nX-GENDER:Male\r\nREV:20100812T13:40:40Z\r\nEND:VCARD";
		$parser = new App_Data_Vcard_Parser($vcardString);
		$cardObject = $parser->parse();
		$card = $cardObject[0];
		
		$this->assertEquals($card->lastname, "Hoitz");
		$this->assertEquals($card->firstname, "Sebastian");
		$this->assertEquals($card->organization, "komola UG");
		$this->assertEquals($card->gender, "Male");
		$this->assertEquals($card->birthday, "1990-12-12");
		$email = $card->email;
		$this->assertEquals($email[0]['value'], "sebastian.hoitz@komola.de");
		$this->assertEquals($email[0]['type'][0], "PREF");
		$this->assertEquals($email[0]['type'][1], "INTERNET");
		$telephone = $card->telephone;
		$this->assertEquals($telephone[0]['value'], "+495313804200");
		$this->assertEquals($telephone[0]['type'][0], "WORK");
		$this->assertEquals($telephone[0]['type'][1], "VOICE");
		$this->assertEquals($telephone[1]['value'], "+491752517038");
		$this->assertEquals($telephone[1]['type'][0], "CELL");
		$this->assertEquals($telephone[1]['type'][1], "VOICE");
		$address = $card->address;
		$this->assertEquals($address[0]['postofficeaddress'], "");
		$this->assertEquals($address[0]['extendedaddress'], "2nd floor");
		$this->assertEquals($address[0]['street'], "Rebenring 33");
		$this->assertEquals($address[0]['city'], "Braunschweig");
		$this->assertEquals($address[0]['state'], "Niedersachsen");
		$this->assertEquals($address[0]['zip'], "38116");
		$this->assertEquals($address[0]['country'], "Germany");
	}

	public function testMultipleVcards()
	{
		$vcardString = "BEGIN:VCARD\r\nVERSION:2.1\r\nN:Schaaf;Thomas\r\nFN:Thomas Schaaf\r\nORG:komola UG\r\nADR;WORK:;2nd floor;Rebenring 33;Braunschweig;Niedersachsen;38106;Germany\r\nTEL;WORK;VOICE:+495313804200\r\nTEL;CELL;VOICE:+4917627379788\r\nBDAY:1991-12-12\r\nURL;WORK:http://komola.de\r\nEMAIL;PREF;INTERNET:schaaf@komola.de\r\nX-GENDER:Male\r\nREV:20100812T13:40:40Z\r\nEND:VCARD\r\nBEGIN:VCARD\r\nVERSION:2.1\r\nN:Hoitz;Sebastian\r\nFN:Sebastian Hoitz\r\nORG:komola UG\r\nADR;WORK:;2nd floor;Rebenring 33;Braunschweig;Niedersachsen;38116;Germany\r\nTEL;WORK;VOICE:+495313804200\r\nTEL;CELL;VOICE:+491752517038\r\nBDAY:1990-12-12\r\nURL;WORK:http://komola.de\r\nEMAIL;PREF;INTERNET:sebastian.hoitz@komola.de\r\nX-GENDER:Male\r\nREV:20100812T13:40:40Z\r\nEND:VCARD";
		$parser = new App_Data_Vcard_Parser($vcardString);
		$cardObject = $parser->parse();
		$card = $cardObject[0];

		$this->assertEquals($card->lastname, "Schaaf");
		$this->assertEquals($card->firstname, "Thomas");
		$this->assertEquals($card->organization, "komola UG");
		$this->assertEquals($card->gender, "Male");
		$this->assertEquals($card->birthday, "1991-12-12");
		$email = $card->email;
		$this->assertEquals($email[0]['value'], "schaaf@komola.de");
		$this->assertEquals($email[0]['type'][0], "PREF");
		$this->assertEquals($email[0]['type'][1], "INTERNET");
		$telephone = $card->telephone;
		$this->assertEquals($telephone[0]['value'], "+495313804200");
		$this->assertEquals($telephone[0]['type'][0], "WORK");
		$this->assertEquals($telephone[0]['type'][1], "VOICE");
		$this->assertEquals($telephone[1]['value'], "+4917627379788");
		$this->assertEquals($telephone[1]['type'][0], "CELL");
		$this->assertEquals($telephone[1]['type'][1], "VOICE");
		$address = $card->address;
		$this->assertEquals($address[0]['postofficeaddress'], "");
		$this->assertEquals($address[0]['extendedaddress'], "2nd floor");
		$this->assertEquals($address[0]['street'], "Rebenring 33");
		$this->assertEquals($address[0]['city'], "Braunschweig");
		$this->assertEquals($address[0]['state'], "Niedersachsen");
		$this->assertEquals($address[0]['zip'], "38106");
		$this->assertEquals($address[0]['country'], "Germany");
		$card2 = $cardObject[1];
		
		$this->assertEquals($card2->lastname, "Hoitz");
		$this->assertEquals($card2->firstname, "Sebastian");
		$this->assertEquals($card2->organization, "komola UG");
		$this->assertEquals($card2->gender, "Male");
		$this->assertEquals($card2->birthday, "1990-12-12");
		$email = $card2->email;
		$this->assertEquals($email[0]['value'], "sebastian.hoitz@komola.de");
		$this->assertEquals($email[0]['type'][0], "PREF");
		$this->assertEquals($email[0]['type'][1], "INTERNET");
		$telephone = $card2->telephone;
		$this->assertEquals($telephone[0]['value'], "+495313804200");
		$this->assertEquals($telephone[0]['type'][0], "WORK");
		$this->assertEquals($telephone[0]['type'][1], "VOICE");
		$this->assertEquals($telephone[1]['value'], "+491752517038");
		$this->assertEquals($telephone[1]['type'][0], "CELL");
		$this->assertEquals($telephone[1]['type'][1], "VOICE");
		$address = $card2->address;
		$this->assertEquals($address[0]['postofficeaddress'], "");
		$this->assertEquals($address[0]['extendedaddress'], "2nd floor");
		$this->assertEquals($address[0]['street'], "Rebenring 33");
		$this->assertEquals($address[0]['city'], "Braunschweig");
		$this->assertEquals($address[0]['state'], "Niedersachsen");
		$this->assertEquals($address[0]['zip'], "38116");
		$this->assertEquals($address[0]['country'], "Germany");
	}

	public function testTypeVcardThomasSchaaf()
	{
		$vcardString = "BEGIN:VCARD\r\nVERSION:3.0\r\nN:Schaaf;Thomas\r\nFN:Thomas Schaaf\r\nTEL;TYPE=WORK,VOICE:+4953123799986\r\nEND:VCARD";
		$parser = new App_Data_Vcard_Parser($vcardString);
		$cardObject = $parser->parse();
		$card = $cardObject[0];
		$this->assertEquals($card->lastname, "Schaaf");
		$this->assertEquals($card->firstname, "Thomas");
		$this->assertEquals($card->fullname, "Thomas Schaaf");
		$telephone = $card->telephone;
		$this->assertEquals($telephone[0]['value'], "+4953123799986");
		$this->assertEquals($telephone[0]['type'][0], "WORK");
		$this->assertEquals($telephone[0]['type'][1], "VOICE");
	}
	public function testTypeDoubleBreakVcardThomasSchaaf()
	{
		$vcardString = "BEGIN:VCARD\r\nVERSION:3.0\r\nN:Schaaf;Thomas\r\n\r\nFN:Thomas Schaaf\r\nTEL;TYPE=WORK,VOICE:+4953123799986\r\nEND:VCARD";
		$parser = new App_Data_Vcard_Parser($vcardString);
		$cardObject = $parser->parse();
		$card = $cardObject[0];
		$this->assertEquals($card->lastname, "Schaaf");
		$this->assertEquals($card->firstname, "Thomas");
		$this->assertEquals($card->fullname, "Thomas Schaaf");
		$telephone = $card->telephone;
		$this->assertEquals($telephone[0]['value'], "+4953123799986");
		$this->assertEquals($telephone[0]['type'][0], "WORK");
		$this->assertEquals($telephone[0]['type'][1], "VOICE");
	}

	public function testTypeVcardNeumann()
	{
		$vcardString = "BEGIN:VCARD\r\nVERSION:3.0\r\nFN:Alexander Neumann\r\nN:Neumann;Alexander;;;\r\nEMAIL;TYPE=INTERNET;TYPE=HOME:ane@asd.de\r\nEND:VCARD";
		$parser = new App_Data_Vcard_Parser($vcardString);
		$cardObject = $parser->parse();
		$card = $cardObject[0];
		$this->assertEquals($card->lastname, "Neumann");
		$this->assertEquals($card->firstname, "Alexander");
		$this->assertEquals($card->fullname, "Alexander Neumann");
		$email = $card->email;
		$this->assertEquals($email[0]['value'], "ane@asd.de");
		$this->assertEquals($email[0]['type'][0], "INTERNET");
		$this->assertEquals($email[0]['type'][1], "HOME");
	}

	public function testEdgeTypeVcardNeumann()
	{
		$vcardString = "BEGIN:VCARD\r\nVERSION:3.0\r\nfn:Alexander Neumann\r\nN:Neumann;Alexander;;;\r\nEmail;Type=Internet;type=home:ane@asd.de\r\nEND:vcard";
		$parser = new App_Data_Vcard_Parser($vcardString);
		$cardObject = $parser->parse();
		$card = $cardObject[0];
		$this->assertEquals($card->lastname, "Neumann");
		$this->assertEquals($card->firstname, "Alexander");
		$this->assertEquals($card->fullname, "Alexander Neumann");
		$email = $card->email;
		$this->assertEquals($email[0]['value'], "ane@asd.de");
		$this->assertEquals($email[0]['type'][0], "INTERNET");
		$this->assertEquals($email[0]['type'][1], "HOME");
	}

	public function testMultipleEdgeTypeVcardNeumann()
	{
		$vcardString = "BEGIN:VCARD\r\nVERSION:3.0\r\nfn:Alexander Neumann\r\nN:Neumann;Alexander;;;\r\nEmail;Type=Internet;type=home:ane@asd.de\r\nEND:vcard\r\nBEGIN:VCARD\r\nVERSION:2.0\r\nfn:Alexander Neumann\r\nOther:asdt\r\nN:Neumann;Alexander;;;\r\nEmail;Type=Internet;type=home:ane@ix.de\r\nEND:vcard";
		$parser = new App_Data_Vcard_Parser($vcardString);
		$cardObject = $parser->parse();
		$card = $cardObject[0];
		$this->assertEquals($card->lastname, "Neumann");
		$this->assertEquals($card->firstname, "Alexander");
		$this->assertEquals($card->fullname, "Alexander Neumann");
		$email = $card->email;
		$this->assertEquals($email[0]['value'], "ane@asd.de");
		$this->assertEquals($email[0]['type'][0], "INTERNET");
		$this->assertEquals($email[0]['type'][1], "HOME");
		
	}

		public function testFileVcard()
		{
			/*$parser = new App_Data_Vcard_Parser("C:\Users\Thomaschaaf\Downloads\test.vcf");
			$cardObject = $parser->parse();
			var_dump($cardObject);*/
		}

}
?>
